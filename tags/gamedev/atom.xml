<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Slowgames - gamedev</title>
	<subtitle>Building Things. Making Stuff. Procgen.</subtitle>
	<link href="https://slowgames.github.io/tags/gamedev/atom.xml" rel="self" type="application/atom+xml"/>
	<link href="https://slowgames.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-07-26T00:00:00+00:00</updated>
	<id>https://slowgames.github.io/tags/gamedev/atom.xml</id>
	<entry xml:lang="en">
		<title>Clang-tidy, VS Code, The Machinery... CMake?</title>
		<published>2020-07-26T00:00:00+00:00</published>
		<updated>2020-07-26T00:00:00+00:00</updated>
		<link href="https://slowgames.github.io/the-machinery-part5/" type="text/html"/>
		<id>https://slowgames.github.io/the-machinery-part5/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Update (2020-07-29)&lt;&#x2F;strong&gt;: The entire section on problems with build output can be solved by &lt;em&gt;not&lt;&#x2F;em&gt; using a workspace (*.code-workspace). Instead just use a typical settings.json in your .vscode folder. 🤘&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;For some developers the topic of static analysis is contentious. But I think it&#x27;s an important tool to have in your toolbox especially when writing C or C++ code. Unfortunately the tools are either expensive or involve a lot of tip-toeing to avoid the false positives that tend to make developers toss their hands up and just live dangerously.&lt;&#x2F;p&gt;
&lt;p&gt;But for me I still think it&#x27;s worth it. I&#x27;d rather get clang-tidy running decently enough and periodically adjust what checks are run, or to use a more extensive set of warnings than the typical default for a C++ compiler.&lt;&#x2F;p&gt;
&lt;p&gt;Rust put a lot of emphasis on warnings for things that wouldn&#x27;t exactly make code unsound, but definitely helps you write code that is easier to change later. I think clang-tidy and &lt;code&gt;-Wall -Wextra&lt;&#x2F;code&gt; can help when writing C or C++ in the same way.&lt;&#x2F;p&gt;
&lt;p&gt;More involved static analysis tools are much better suited when you&#x27;re writing safety-critical code that must conform to standards such as MISRA or AUTOSAR. And in those domains it appears to be relatively common to just use simulink and have it generate your C code and apply futher analysis and proofs after the fact. Or there is Ada&#x2F;Spark that can be formally verified, then have C code generated from it.&lt;&#x2F;p&gt;
&lt;p&gt;But game development, tool development, is a &lt;em&gt;creative endeavor&lt;&#x2F;em&gt; and &lt;em&gt;you can&#x27;t formally prove that an artist or designer is empowered or inspired by your work.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And yet, I still feel like some basic tools can help keep me on a path to make my creative efforts more useful over a longer period of time. Our Machinery also belives that in some sense given that the use of clang-format is part of their design guidelines for code.&lt;&#x2F;p&gt;
&lt;p&gt;I asked about clang-tidy on the Our Machinery forums though and in general, the team aren&#x27;t users or fans. Too many experiences with false positives and the like. Well, that won&#x27;t stop me from trying a couple of things for my sake. :D&lt;&#x2F;p&gt;
&lt;h3 id=&quot;it-s-dangerous-to-go-alone-take-this&quot;&gt;It&#x27;s dangerous to go alone.. take this!&lt;&#x2F;h3&gt;
&lt;p&gt;The easiest (and free) couple of tools would be &lt;strong&gt;cppcheck&lt;&#x2F;strong&gt; and &lt;strong&gt;clang-tidy&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Visual Studio can show you diagnostic output from the compiler, as well as from clang-tidy. Super great. VS Code has a couple of extensions for it&#x27;s lint system that can display output from a wide variety of tools but unfortunately it doesn&#x27;t appear that you can easily &amp;quot;stack&amp;quot; linters and have the output from multiple sources without building custom extensions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;visual-studio-2019&quot;&gt;Visual Studio 2019&lt;&#x2F;h3&gt;
&lt;p&gt;I think that most users of Visual Studio are probably already aware of how the built-in linters work. And what&#x27;s more, is that they&#x27;re probably using Resharper or VAX. &lt;em&gt;There is also an interesting looking &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=caphyon.ClangPowerTools&quot;&gt;Clang Power Tools&lt;&#x2F;a&gt; extension but I haven&#x27;t tried it yet.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Whether you&#x27;re using CMake and &amp;quot;Open Folder&amp;quot; workflow, or using an msbuild project (as we end up doing when building The Machinery plugins since tmbuild uses premake to generate msbuild projects), the only thing you have to do to start seeing clang-tidy output is to set a project property for clang-tidy checks.&lt;&#x2F;p&gt;
&lt;p&gt;Documentation for setting it up is &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;cpp&#x2F;code-quality&#x2F;clang-tidy?view=vs-2019&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am curious though, since our projects are being generated via premake, after I set my lints up, they wouldn&#x27;t survive a project refresh. Can premake support adding this property to a project?&lt;&#x2F;p&gt;
&lt;p&gt;There doesn&#x27;t seem to be an official or otherwise widely used cppcheck extension for Visual Studio.&lt;&#x2F;p&gt;
&lt;p&gt;Output from builds, such as errors and warnings are so far all correctly parsed and shown in the &amp;quot;Error List&amp;quot; tool window and correctly navigate to the file and line which you can see here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part5&#x2F;vs2019-error-list.png&quot; alt=&quot;error_list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My simple test of these is to simply comment out the &lt;code&gt;TM_SHUTDOWN_TEMP_ALLOCATOR(ta);&lt;&#x2F;code&gt; at the end of the engine update function and verify that I get the intended warning that we&#x27;re missing it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;&#x2F;h3&gt;
&lt;p&gt;It probably comes as no surprise that there is a buffet of extensions for using clang tools in VS Code. I chose to go with the &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=notskm.clang-tidy&quot;&gt;clang-tidy&lt;&#x2F;a&gt; extension. And I was not disappointed after getting over some configuration hurdles.&lt;&#x2F;p&gt;
&lt;p&gt;A second extension that I tried out and was fairly pleased with was the &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=jbenden.c-cpp-flylint&quot;&gt;C&#x2F;C++ Advanced Lint&lt;&#x2F;a&gt; extension. Of particular interest is that it supports cppcheck. It also support &amp;quot;clang&amp;quot; but not clang-tidy which &lt;em&gt;is a choice&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll avoid a rather long and windy exposition about how I arrived at the configuration I&#x27;m using and just place it here so you can refer to at your leisure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clang-tidy.compilerArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-DTM_OS_WINDOWS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-IOurMachinery&#x2F;headers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    ],
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clang-tidy.compilerArgsBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-W-std=c11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Wall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Wextra&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Weverything&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Wno-unused-local-typedef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Wno-missing-braces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Wno-microsoft-anon-tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Wno-unused-command-line-argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    ],
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clang-tidy.blacklist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foundation&#x2F;.*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Really don&amp;#39;t want to be seeing output from The Machinery headers we can&amp;#39;t control.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clang-tidy.checks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bugprone-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-bugprone-branch-clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; TM_STATIC_HASH
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clang-analyzer-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cert-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cppcoreguidelines-init-variables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hicpp-signed-bitwise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;misc-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;performance-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;portability-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;readability-*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-readability-uppercase-literal-suffix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    ]
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This config provides decent feedback when coding. Clang-tidy isn&#x27;t the fastest in the world at running checks (well, it&#x27;s running &lt;em&gt;a lot&lt;&#x2F;em&gt; of checks). By including the warnings that I&#x27;d otherwise be using during a build I&#x27;m getting feedback early as well. I like to work with &lt;code&gt;-Werror&lt;&#x2F;code&gt; when possible so having some feedback early on helps. You can see an example of the results here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part5&#x2F;vscode-error-list.png&quot; alt=&quot;vscode_error_list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pressing &lt;code&gt;F8&lt;&#x2F;code&gt; will jump through the problem list and visit the files affected. Very nice!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-about-cppcheck&quot;&gt;What about cppcheck?&lt;&#x2F;h4&gt;
&lt;p&gt;cppcheck seems to have a lot going for it and I&#x27;ll probably spend some more time with it. Once example where it digs a tad deeper than clang-tidy is that in the &lt;code&gt;TM_INIT_TEMP_ALLOCATOR(ta);&lt;&#x2F;code&gt; macro it notices and reports that the helpfully named variable used to give us a warning regarding the missing shutdown call, is actually not being initialized.&lt;&#x2F;p&gt;
&lt;p&gt;The problem for me comes with the carray utils that are a part of The Machinery. These trigger a lot of errors around null pointers and the like. They are very likely false positives since the code demonstrably works. But you can&#x27;t fault cppcheck for being upset that you basically take a nullpointer.. &lt;em&gt;then push a value on to it&lt;&#x2F;em&gt; via a very nested set of macros.&lt;&#x2F;p&gt;
&lt;p&gt;I assume there is a test suite being run before releases and so on that would catch any regressions and the code probably isn&#x27;t being touched much... but it&#x27;s a problem for me that we get FP on it since the &amp;quot;lib&amp;quot; is essentially a collection of macros that you inline to your compilation unit to use. Which means I&#x27;d be getting these errors quite a bit. And the checks themselves I wouldn&#x27;t want to disable.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately I can&#x27;t submit this code to the cppcheck project as a false positive example. I might try and replicate it with a set of example macros... but at some point all you&#x27;re doing is &lt;em&gt;giving in to the itch&lt;&#x2F;em&gt; and not learning or doing the things I wish I would be.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sticking-with-clang-tidy-for-now&quot;&gt;Sticking with clang-tidy for now.&lt;&#x2F;h4&gt;
&lt;p&gt;For the moment I&#x27;m happy with what I&#x27;m getting from clang-tidy and VS Code. I should say that, cppcheck works pretty great and quick. The reason I didn&#x27;t want to use it was because of it&#x27;s results from looking into code that&#x27;s essentially out of my control.&lt;&#x2F;p&gt;
&lt;p&gt;Unused parameters are things I like to have warnings for. Also, unusued field initializers. The Machinery template premake script is disabling these, which I&#x27;ll leave as-is, but at least with clang-tidy I&#x27;ll get my precious squiggles. To deal with missing field initializers one option is to use the nice C syntax for named field initialization. For unused parameters, either my interface is poorly specified, or I&#x27;m implementing an interface for The Machinery and I literally don&#x27;t plan or need to use some of the parameters. For that case I have the following solution:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;UNUSED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)(x)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some folks might be annoyed with this. Fine. :D But to me this is a very direct way to letting future &lt;em&gt;readers&lt;&#x2F;em&gt; of the code that, yes, this parameter is indeed intentionally unused.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;but-what-about-build-output&quot;&gt;But what about build output?&lt;&#x2F;h3&gt;
&lt;p&gt;With VS2019 we&#x27;re getting correctly parsed output from msbuild so that you see both the linter warning &lt;em&gt;and&lt;&#x2F;em&gt; the build error (since I&#x27;m using &lt;code&gt;-Werror&lt;&#x2F;code&gt;). But in VS Code this hasn&#x27;t worked for me yet. Something is not quite right with the output from the build and the result is that errors, or warnings, are not associated with any workspace files. Nor can I ctrl+click the paths:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part5&#x2F;vscode-no-file.png&quot; alt=&quot;vscode-no-file&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A very clear issue can be seen when I do try to ctrl+click the path in the output.&lt;&#x2F;p&gt;
&lt;p&gt;My guess is that, this is a problem with project structure. I have the premake script in a subfolder of the workspace, and I must run the build using the following task definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
        {
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Build CosmicTrash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;isDefault&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;},
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;windows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tmbuild.exe -c Release --clang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
            },
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [],
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;problemMatcher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$msCompile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
            ],
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${workspaceFolder}&#x2F;CosmicTrash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
            }
        }
    ],
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I feel like, if the build output would use absolute paths then we wouldn&#x27;t have an issue. But the premake generated project files are using relative paths from the build directory they create.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ItemGroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ClCompile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;Include&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..\..\plugins\sprite_component\sprite_component.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &#x2F;&amp;gt;
&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ItemGroup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I don&#x27;t see much in the docs regarding what options I have for dealing with this. But after moving the project around and trying to build from another location I at least narrowed one thing down. There is a &lt;code&gt;location&lt;&#x2F;code&gt; key in the project definition in our premake script. It&#x27;s value was &lt;code&gt;build&#x2F;sprite_component&lt;&#x2F;code&gt; and this now becomes clear how we could try and move forward.&lt;&#x2F;p&gt;
&lt;p&gt;If I set the location of the project to &lt;code&gt;&amp;quot;.&amp;quot;&lt;&#x2F;code&gt; then I can ctrl+click on errors or warnings. Not because I fixed the issue though. It&#x27;s just a coincidence of project location. Because instead of &lt;code&gt;..&#x2F;..&lt;&#x2F;code&gt; we now have &lt;code&gt;..&lt;&#x2F;code&gt; and since we&#x27;re running from a subdirectory it ends up correctly finding the file... &lt;em&gt;but only when using ctrl+click&lt;&#x2F;em&gt;. The error matcher still can&#x27;t figure out where this file is.&lt;&#x2F;p&gt;
&lt;p&gt;hrm... So I guess... maybe it works from the workspace root? &lt;strong&gt;NOPE&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Does the error matcher work at all? Is it ever supposed to be output to the &lt;code&gt;Problems&lt;&#x2F;code&gt; tool window?&lt;&#x2F;p&gt;
&lt;p&gt;At this point I&#x27;m getting fed up. I&#x27;m intensely unsatisfied that I can&#x27;t reach &lt;em&gt;Emacs levels of compilation output functionality&lt;&#x2F;em&gt; (using a shortcut to cycle through compilation warnings and errors).&lt;&#x2F;p&gt;
&lt;p&gt;Could this be, because we&#x27;re using clang-cl? Does msvc output paths differently?&lt;&#x2F;p&gt;
&lt;p&gt;First I&#x27;ll move things back into a subdirectory because random build files everywhere &lt;em&gt;suuuuuuuucks&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My directory structure now looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;workspace&amp;gt;&#x2F;
|_ CosmicTrash&#x2F;
|_|_ premake5.lua
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Working directory for the build is &lt;code&gt;CosmicTrash&lt;&#x2F;code&gt;, project location in the premake script is &lt;code&gt;&amp;quot;.&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Output from clang-cl: &lt;code&gt;plugins\sprite_component\sprite_component.c(85,5)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Output from msvc: &lt;code&gt;C:\projects\slowgames\CosmicTrash\plugins\sprite_component\sprite_component.c(85,5)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;WHOA WHOA WHOA&lt;&#x2F;strong&gt; &lt;em&gt;wait a second&lt;&#x2F;em&gt;... has this all been a misdirection because I&#x27;m using clang? And I still dont get compiler matches... so does compiler output &lt;em&gt;ever&lt;&#x2F;em&gt; get sent to the problems window?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s back up here. Let&#x27;s roll this all the way back to the beginning. Did msvc always give absolute paths?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;C:\projects\slowgames\CosmicTrash&amp;gt;tmbuild -c Release --clang
Building configurations...
Running action &amp;#39;vs2019&amp;#39;...
Generated CosmicTrash.sln...
Generated build&#x2F;sprite_component&#x2F;sprite_component.vcxproj...
Done (74ms).
Microsoft (R) Build Engine version 16.6.0+5ff7b0c9e for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

..\..\plugins\sprite_component\sprite_component.c(85,5): error : unused variable &amp;#39;ta_TM_SHUTDOWN_TEMP_ALLOCATOR_is_missing&amp;#39; [-Werror,-Wunused-variable] [C:\projects\slowgames\CosmicTrash\build
\sprite_component\sprite_component.vcxproj]
C:\projects\slowgames\OurMachinery\headers\foundation&#x2F;temp_allocator.h(98,14): message : expanded from macro &amp;#39;TM_INIT_TEMP_ALLOCATOR&amp;#39; [C:\projects\slowgames\CosmicTrash\build\sprite_component\
sprite_component.vcxproj]
&amp;lt;scratch space&amp;gt;(28,1): message : expanded from here [C:\projects\slowgames\CosmicTrash\build\sprite_component\sprite_component.vcxproj]

C:\projects\slowgames\CosmicTrash&amp;gt;rm -rf CosmicTrash.sln build

C:\projects\slowgames\CosmicTrash&amp;gt;tmbuild -c Release
Building configurations...
Running action &amp;#39;vs2019&amp;#39;...
Generated CosmicTrash.sln...
Generated build&#x2F;sprite_component&#x2F;sprite_component.vcxproj...
Done (75ms).
Microsoft (R) Build Engine version 16.6.0+5ff7b0c9e for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

  sprite_component.c
C:\projects\slowgames\CosmicTrash\plugins\sprite_component\sprite_component.c(85,5): error C2220: the following warning is treated as an error [C:\projects\slowgames\CosmicTrash\build\sprite_c
omponent\sprite_component.vcxproj]
C:\projects\slowgames\CosmicTrash\plugins\sprite_component\sprite_component.c(85,5): warning C4101: &amp;#39;ta_TM_SHUTDOWN_TEMP_ALLOCATOR_is_missing&amp;#39;: unreferenced local variable [C:\projects\slowgam
es\CosmicTrash\build\sprite_component\sprite_component.vcxproj]

C:\projects\slowgames\CosmicTrash&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Bruh&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;y-all-just-made-me-go-all-out&quot;&gt;Y&#x27;all just made me go all out&lt;&#x2F;h3&gt;
&lt;p&gt;My quest to live the zen of &lt;code&gt;tmbuild&lt;&#x2F;code&gt; has faltered. &lt;em&gt;Let&#x27;s whip out a 10 line cmake script and see what we get when we do.&lt;&#x2F;em&gt; Because I&#x27;m just convinced that it&#x27;ll work where tmbuild&#x2F;premake is failing me.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lemme go on record and just wonder out loud why people are avoiding CMake in favor of less functional tools that just bake msbuild projects.... when even Microsoft is going hard on cross-platform builds with CMake?&lt;&#x2F;p&gt;
&lt;p&gt;Do I love CMake? Nope. It&#x27;s a dumpster fire that does waaaaay too much. It gets better with every release but there are volumes of old and bad, and I&#x27;m not sure how to take the new conventions and make them policy. So I 100% understand where people are coming from when they learn to avoid using it.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand... it&#x27;s the closest thing we get to a standard build system for C and C++. It does the damned job and is supported as a native project model for basically every IDE or editor used by the community at large. It works everywhere (that I know of) and can be bootstrapped from tools pretty easily thanks to releases including &amp;quot;portable&amp;quot; options in self-contained archives.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The Machinery is written in C. The premake script is mostly just setting some common settings and ensuring the output of the build goes into the &lt;code&gt;TM_SDK_DIR&#x2F;bin&#x2F;plugins&lt;&#x2F;code&gt;. We can replicate this for great justice and I&#x27;m sure everybody reading is straight up:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;go-for-it.jpg&quot; alt=&quot;go-for-it&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hold-my-beer&quot;&gt;Hold my beer&lt;&#x2F;h4&gt;
&lt;p&gt;So I&#x27;m talking &lt;em&gt;a lot of shit&lt;&#x2F;em&gt; right now, but we can test really quickly whether there is even a chance this actually works. We don&#x27;t even have to try and replicate the premake build because a single shared library target which can&#x27;t find the SDK will give us error output and we&#x27;ll see if it shows up.&lt;&#x2F;p&gt;
&lt;p&gt;First step, install the &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-vscode.cmake-tools&quot;&gt;cmake tools&lt;&#x2F;a&gt; extension.&lt;&#x2F;p&gt;
&lt;p&gt;Second step is to add a &lt;code&gt;CMakeLists.txt&lt;&#x2F;code&gt; to the workspace root:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cmake_minimum_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;3.15)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Slowgames &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0.1.0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_library&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cosmic_trash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SHARED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CosmicTrash&#x2F;plugins&#x2F;sprite_component&#x2F;sprite_component.c)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Third step, let the extension configure using the &amp;quot;Visual Studio Community 2019 - amd64&amp;quot; kit. Use the &amp;quot;Release&amp;quot; variant. &lt;em&gt;All of which is just available from the toolbar: &lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part5&#x2F;cmake-toolbar.png&quot; alt=&quot;cmake-toolbar&quot; &#x2F;&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally we build, knowing full well we&#x27;ll get an error... aaaaand.... YES:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part5&#x2F;compiler-output-in-problems-window.png&quot; alt=&quot;we-got-problems&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The CMake tools for VS Code do not use the terminal and it bundles a suite of output parsers that apparently work.&lt;&#x2F;p&gt;
&lt;p&gt;However, if I configure the build with clang it can&#x27;t parse the output...&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s check the score:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;CMake Build&lt;&#x2F;th&gt;&lt;th&gt;CMake - tasks.json&lt;&#x2F;th&gt;&lt;th&gt;tmbuild&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;MSVC&lt;&#x2F;td&gt;&lt;td&gt;List ✔ Click ✖&lt;&#x2F;td&gt;&lt;td&gt;List ✖ Click ✔&lt;&#x2F;td&gt;&lt;td&gt;List ✖ Click ✔&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CLANG&lt;&#x2F;td&gt;&lt;td&gt;List ✖ Click ✖&lt;&#x2F;td&gt;&lt;td&gt;List ✖ Click ✖&lt;&#x2F;td&gt;&lt;td&gt;List ✖ Click ✖&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;For a moment I wondered whether I&#x27;m just barking up the wrong tree and the problem matcher does actually work since the output is colored by warning and error severity. Removing the warning matcher from the task however didn&#x27;t change the fact that output is colored.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve changed the task type from &amp;quot;shell&amp;quot; to &amp;quot;process&amp;quot;. I&#x27;ve run builds using cl.exe directly as well. No dice. Either the standard cpp tools in VS Code are currently broken and not working as documented. Or something beyond my capacity to deal with right now is the root of the problem.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;where-i-m-at-at-the-end-of-all-this&quot;&gt;Where I&#x27;m at, at the end of all this...&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;I&#x27;m wrong.&lt;&#x2F;strong&gt; &lt;em&gt;tmbuild is all fine and dandy&lt;&#x2F;em&gt;. It&#x27;s the &lt;em&gt;environment&lt;&#x2F;em&gt; I&#x27;m working in that conspires against me. VS Code just isn&#x27;t working. Not even their own documentation works correctly. Even if you have a simple task that runs cl.exe on a file containing an intentional error, the &lt;code&gt;$msCompile&lt;&#x2F;code&gt; problem matcher &lt;em&gt;will not&lt;&#x2F;em&gt; give you what you need. (circa 1.47.3)&lt;&#x2F;p&gt;
&lt;p&gt;Meanwhile, not being able to ctrl+click the path with clang, that&#x27;s &lt;em&gt;sorta&lt;&#x2F;em&gt; fixed by adding &lt;code&gt;-fdiagnostics-absolute-paths&lt;&#x2F;code&gt; to the clang options in premake5.lua. 👍 I say sorta because it works sometimes but not always.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What I want most is to have the output from the build included in the Problems tool window. It appears that my only option would be to use CMake and MSVC until sometime in the future when any of this works again.&lt;&#x2F;p&gt;
&lt;p&gt;For those curious, here is the start of the_machinery.cmake:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(NOT TM_SDK_DIR)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(FATAL &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TM_SDK_DIR is not set!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;endif&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMAKE_MSVC_RUNTIME_LIBRARY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MultiThreaded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_HEADERS_DIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&#x2F;headers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_PLUGINS_DIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&#x2F;bin&#x2F;plugins)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tm_plugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;target_name)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_library&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SHARED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ARGN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;})
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_target_properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PROPERTIES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
        C_STANDARD 11
        OUTPUT_NAME &amp;quot;tm_${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&amp;quot;
        RUNTIME_OUTPUT_DIRECTORY &amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_PLUGINS_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&amp;quot;
    )
    if (WIN32)
        target_compile_definitions(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE &amp;quot;TM_OS_WINDOWS&amp;quot; &amp;quot;_CRT_SECURE_NO_WARNINGS&amp;quot;)
        if (CMAKE_BUILD_TYPE MATCHES &amp;quot;Debug&amp;quot;)
            target_compile_definitions(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE &amp;quot;TM_CONFIGURATION_DEBUG&amp;quot; &amp;quot;DEBUG&amp;quot;)
        else()
            target_compile_definitions(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE &amp;quot;TM_CONFIGURATION_RELEASE&amp;quot; &amp;quot;_DEBUG&amp;quot; &amp;quot;NDEBUG&amp;quot;)
        endif()
        if (MSVC)
            target_compile_options(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE
                &#x2F;W4 &#x2F;WX
                &#x2F;wd4057 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Slightly different base types. Converting from type with volatile to without.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Unused formal parameter. I think unusued parameters are good for documentation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4152 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Conversion from function pointer to void *. Should be ok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Zero-sized array. Valid C99.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4201 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Nameless struct&#x2F;union. Valid C11.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4204 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Non-constant aggregate initializer. Valid C99.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4206 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Translation unit is empty. Might be #ifdefed out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4214 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Bool bit-fields. Valid C99.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4221 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Pointers to locals in initializers. Valid C99.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
                &#x2F;wd4702 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Unreachable code. We sometimes want return after exit() because otherwise we get an error about no return value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            )
            target_link_options(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE &#x2F;ignore:4099)
        endif()
    endif()
    if(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CMAKE_C_COMPILER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} MATCHES &amp;quot;Clang&amp;quot;)
        target_compile_options(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE
            -Wno-missing-field-initializers   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# = {0} is OK.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -Wno-unused-parameter             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Useful for documentation purposes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -Wno-unused-local-typedef         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We don&amp;#39;t always use all typedefs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -Wno-missing-braces               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# = {0} is OK.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -Wno-microsoft-anon-tag           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Allow anonymous structs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -Wno-unused-command-line-argument &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# stop complainging about the &#x2F;std:c++14 option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -Werror
            -fdiagnostics-absolute-paths
            -fms-extensions                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Allow anonymous struct as C inheritance.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -mavx                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# AVX.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
            -mfma
        )
    endif()
    target_include_directories(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;} PRIVATE &amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&#x2F;headers&amp;quot;)
endmacro(tm_plugin)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then for your projects you&#x27;re CMakeLists.txt might look something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cmake_minimum_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;3.15)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Slowgames &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;VERSION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0.1.0)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_DIR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PROJECT_SOURCE_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&#x2F;OurMachinery)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;include&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SDK_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}&#x2F;the_machinery.cmake)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cosmic_trash
    cosmic_trash&#x2F;src&#x2F;foo.h
    cosmic_trash&#x2F;src&#x2F;bar.inl
    cosmic_trash&#x2F;src&#x2F;foo.c)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function &lt;code&gt;tm_plugin&lt;&#x2F;code&gt; could easily include a post-build command to run docgen, and even a pre-build command to run hash.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Machinery - Part 4</title>
		<published>2020-07-21T00:00:00+00:00</published>
		<updated>2020-07-21T00:00:00+00:00</updated>
		<link href="https://slowgames.github.io/the-machinery-part4/" type="text/html"/>
		<id>https://slowgames.github.io/the-machinery-part4/</id>
		<content type="html">&lt;p&gt;Our Machinery definitely turns the page on certain conventions. And not in a way that seems troublesome or pointless. The goal really appears to be about strong communication and making sure things describe intent. One that I didn&#x27;t expect was having &lt;em&gt;engines&lt;&#x2F;em&gt; in addition to &lt;em&gt;entity systems&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is a clear and interesting distinction between them and my preconceived notions for what an &amp;quot;entity system&amp;quot; would be, is actually what is called an &amp;quot;engine&amp;quot; in The Machinery.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t think it&#x27;s a problem to call the functions that operate, or transform data on components &lt;em&gt;engines&lt;&#x2F;em&gt;. In fact I rather like it personally. &lt;em&gt;And yes, it&#x27;s still in the phase where I have a total crush on The Machinery and haven&#x27;t entered the pit of familiarity and all that.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ANYWAY...&lt;&#x2F;p&gt;
&lt;p&gt;Engines! They are the things that run around and apply themselves to your scenes based on component filters, filters which inform The Machinery as to what component data should be provided to the engine when it&#x27;s called.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Entity systems on the other hand are simply called upon to perform some kinds of work (like a generic &#x27;tick&#x27; or &#x27;update&#x27;) and aren&#x27;t given any specific component data. For the rest of this post Imma ignore them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;registering-an-engine&quot;&gt;Registering an engine&lt;&#x2F;h2&gt;
&lt;p&gt;Engines operate in &amp;quot;simulation&amp;quot; mode (runtime) and so they are registered as an implementation of the &lt;code&gt;tm_entity_simulation_i&lt;&#x2F;code&gt; interface:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_add_or_remove_implementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reg, load, TM_ENTITY_SIMULATION_INTERFACE_NAME, component__register_engine);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similar to the interface for creating a component, the &lt;code&gt;tm_engine_simulation_i&lt;&#x2F;code&gt; interface is a single function pointer with which we register our &lt;code&gt;component__register_engine&lt;&#x2F;code&gt; function as an implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Our implementation takes a pointer to a entity &lt;em&gt;context&lt;&#x2F;em&gt;, gets handles to the required components, initializes our &lt;code&gt;tm_engine_i&lt;&#x2F;code&gt; interface and registers it.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not yet certain what the relationship between an entity &lt;em&gt;context&lt;&#x2F;em&gt; and an &lt;em&gt;entity&lt;&#x2F;em&gt; itself is yet. &lt;em&gt;Is this engine registered for every entity in our scenes with the correct combination of components?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The entity engine interface can define filters which describe the set of entities it should be applied to. This can take the form of specifying an inclusive list of component types (only entities with &lt;em&gt;all&lt;&#x2F;em&gt; of the listed components), and exclusive list (only entitye with &lt;em&gt;none&lt;&#x2F;em&gt; of the listed components), or a more comprehensive &amp;quot;filter&amp;quot; function which can be used to apply more complicated expressions as needed.&lt;&#x2F;p&gt;
&lt;p&gt;Our example component specifies both the component list and the filter function.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The entity api provides a function to lookup components by their hash, which we use to get a handle to the 3 components we&#x27;re interested in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint32_t sprite_component = tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lookup_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, TM_TT_TYPE_HASH__SPRITE_COMPONENT);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint32_t transform_component = tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lookup_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, TM_TT_TYPE_HASH__TRANSFORM_COMPONENT);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint32_t link_component = tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lookup_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, TM_TT_TYPE_HASH__LINK_COMPONENT);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is part of the reason I&#x27;m currently confused by the distinction between an &lt;em&gt;entity context&lt;&#x2F;em&gt; and and &lt;em&gt;entity&lt;&#x2F;em&gt;. Are we getting handles to specific component instances or some archetypical index for the component for every entity?&lt;&#x2F;p&gt;
&lt;p&gt;Taking a look into &lt;code&gt;entity.h&lt;&#x2F;code&gt; I see that &lt;code&gt;lookup_component&lt;&#x2F;code&gt; gives us an ID for a component (where 0 means &amp;quot;no component&amp;quot;). This ID is actually used in other functions (such as &lt;code&gt;add_component&lt;&#x2F;code&gt;, &lt;code&gt;get_component&lt;&#x2F;code&gt;, and &lt;code&gt;remove_component&lt;&#x2F;code&gt;). In these other cases you&#x27;re using the component ID  &lt;em&gt;in combination&lt;&#x2F;em&gt; with an entity handle &lt;em&gt;and&lt;&#x2F;em&gt; the entity context.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;With our three component IDs determined we can initialize our engine interface and register it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_engine_i sprite_component_engine = {
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sprite Component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_components &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= { sprite_component, transform_component, link_component },
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;},
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= engine_update__sprite_component,
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= engine_filter__sprite_component,
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= (tm_engine_o *)ctx,
};
tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register_engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, &amp;amp;sprite_component_engine);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We give the engine a name, list the required components and declare whether we intend to write or read data on the component. In our case we&#x27;re intending to update the transform or link component, but only read from our the sprite component.&lt;&#x2F;p&gt;
&lt;p&gt;Our update and filter functions are associated with the engine as is the entity context.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;filter-functions&quot;&gt;Filter functions&lt;&#x2F;h3&gt;
&lt;p&gt;These functions are useful when a simple description of a set isn&#x27;t possible using the &lt;code&gt;components&lt;&#x2F;code&gt; and &lt;code&gt;excludes&lt;&#x2F;code&gt; fields of the &lt;code&gt;tm_engine_i&lt;&#x2F;code&gt; interface.&lt;&#x2F;p&gt;
&lt;p&gt;In the case of this engine the filter function is used because of the relationship between the &lt;code&gt;link&lt;&#x2F;code&gt; component and the &lt;code&gt;transform&lt;&#x2F;code&gt; component. Our filter function says that any entity with a sprite component &lt;em&gt;and&lt;&#x2F;em&gt; either a link component or transform component are valid for this engine.&lt;&#x2F;p&gt;
&lt;p&gt;We need to specify this, otherwise we would only be operating on entities without a parent &lt;em&gt;or&lt;&#x2F;em&gt; entities with a parent, instead of both. This is because entities with a link component can only have their transform modified through the link component.&lt;&#x2F;p&gt;
&lt;p&gt;Filter functions work by way of component masks, although I&#x27;d assume you&#x27;re free to use other means depending on the case. Our sample filter is defined as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;engine_filter__sprite_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    tm_engine_o *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint32_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    uint32_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_components&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_component_mask_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mask&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_entity_mask_has_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mask, components[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]) &amp;amp;&amp;amp;
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_entity_mask_has_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mask, components[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]) ||
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_entity_mask_has_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mask, components[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;clarification-time&quot;&gt;Clarification time&lt;&#x2F;h2&gt;
&lt;p&gt;Before I hop into the update method, it&#x27;s time to sit down with some docs and understand more concretely all the new terms and build up a better mental model.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&#x27;t always avoid docs before trying to understand things, but when there is sample code it&#x27;s just easier for me to start there first and build up questions which lead me through the documentation with more of a goal.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;code&gt;entity.h&lt;&#x2F;code&gt; has a neat and concise description of the four main features of the entity system in The Machinery:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;em&gt;&lt;em&gt;entity&lt;&#x2F;em&gt;&lt;&#x2F;em&gt; is an ID which uniquely identifies a game object.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;em&gt;&lt;em&gt;component&lt;&#x2F;em&gt;&lt;&#x2F;em&gt; is data that can be associated with an entity.&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;em&gt;&lt;em&gt;engine&lt;&#x2F;em&gt;&lt;&#x2F;em&gt; is an update function that is applied to all entities with certain components.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;em&gt;&lt;em&gt;system&lt;&#x2F;em&gt;&lt;&#x2F;em&gt; is an update function that is applied to the entire entity context.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s explained that entities live in something called a &lt;em&gt;simulation context&lt;&#x2F;em&gt; and that entity IDs are only unique for a specific context. Applications are able to have multiple contexts running if need be. Each one being it&#x27;s own isolated world.&lt;&#x2F;p&gt;
&lt;p&gt;Seems fair to imagine for now that we&#x27;d only be dealing with a single context here since we&#x27;re setting up a small scene in the editor and running it.&lt;&#x2F;p&gt;
&lt;p&gt;An interesting part is called &lt;em&gt;The Blackboard&lt;&#x2F;em&gt;. This is the system designed for providing constant data to engines without having to explicitly provide it to each instance. The example used in the docs was a global such as &amp;quot;delta time&amp;quot;. Each blackboard value is a struct with an ID and a union that&#x27;s either a &lt;code&gt;double&lt;&#x2F;code&gt; or a &lt;code&gt;void*&lt;&#x2F;code&gt;. The IDs defined in the entity system headers are all hashes of strings such as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Blackboard item representing the total elapsed time in the simulation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;TM_ENTITY_BB__TIME &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_STATIC_HASH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tm_time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x6a30b071f871aa9d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Blackboard values are provided to engines as a pair of start and end pointers. It seems a bit strange to have to search through the blackboard values like this in order to find a value you&#x27;re interested in. But that strangeness is perhaps the result of having more often used other languages (including Rust) where you&#x27;d probably just be handed a map of some kind. Is always running a hash function to find something, perhaps multiple things, worth the cost compared to just iterating over these items and comparing integers? I think that would just depend on how many items you might be looking for, and how many items you&#x27;re putting into the blackboard.&lt;&#x2F;p&gt;
&lt;p&gt;To illustrate how this works, here is what we do early in the update function to get the elapsed simulation time:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; t=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_entity_blackboard_value_t *bb = data-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blackboard_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; bb != data-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blackboard_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; ++bb)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(bb-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;== TM_ENTITY_BB__TIME) {
        t = bb-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;double_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;applying-the-engine&quot;&gt;Applying the engine&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re now able to take a look at the biggest function in the file. Where something actually happens and is applied to the scene.&lt;&#x2F;p&gt;
&lt;p&gt;This sample component applies a sinf modulation to the y coordinate of an entitys transform or link component. It uses the frequency and amplitude fields of our component and caches the incoming y coordinate on the y0 field to be used in the next update.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s quickly look at the signature of the update function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;engine_update__sprite_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    tm_engine_o *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    tm_engine_update_set_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;tm_engine_o*&lt;&#x2F;code&gt; is the pointer to our entity context (which we provided when registering this engine), and the &lt;code&gt;tm_engine_update_set_t*&lt;&#x2F;code&gt; is what holds pointers to our blackboard values and our entity data to operate on.&lt;&#x2F;p&gt;
&lt;p&gt;For such a simple transformation of data, a whole bunch of stuff is going on in this component so I&#x27;ll start with a rough outline:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a temp allocator&lt;&#x2F;li&gt;
&lt;li&gt;Initialize pointers for our lists of entities (one for link components, and one for transform components)&lt;&#x2F;li&gt;
&lt;li&gt;Get a pointer to the link_component manager&lt;&#x2F;li&gt;
&lt;li&gt;Get the current simulation time via the blackboard. &lt;em&gt;(see above)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For each &lt;code&gt;tm_engine_update_array_t&lt;&#x2F;code&gt; in the update set:
&lt;ul&gt;
&lt;li&gt;Get the pointer to the list of each component type&lt;&#x2F;li&gt;
&lt;li&gt;For each entity in this update array:
&lt;ul&gt;
&lt;li&gt;Update the sprite component &lt;code&gt;y0&lt;&#x2F;code&gt; field.&lt;&#x2F;li&gt;
&lt;li&gt;Update the y coordinate on either the link or the transform component&lt;&#x2F;li&gt;
&lt;li&gt;Store the entity ID in either the link or transform&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;For each entity that had a link component
&lt;ul&gt;
&lt;li&gt;Use the link component api &lt;code&gt;transform&lt;&#x2F;code&gt; function to update it&#x27;s transform&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Use the entity api &lt;code&gt;notify&lt;&#x2F;code&gt; function to signal changes for the entities with just a transform component&lt;&#x2F;li&gt;
&lt;li&gt;Destory the temp allocator&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;With this outline in mind, let&#x27;s look more closely at a couple of things.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;temp-allocator&quot;&gt;Temp allocator&lt;&#x2F;h4&gt;
&lt;p&gt;The allocator is used by the &lt;code&gt;carray&lt;&#x2F;code&gt; utility code which implements a stretchy buffer. There are two macros which init and shutdown the allocator and they should bookend whatever scope will require it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_INIT_TEMP_ALLOCATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ta);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* ... all the code ... *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_SHUTDOWN_TEMP_ALLOCATOR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ta);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you initialize a temp allocator but forget to use a matching shutdown, what happens? Memory leak? &lt;em&gt;Yep&lt;&#x2F;em&gt;... BUT a very nice thing about this macro is that it uses a simple trick to provide a warning for you when you forget to shut it down:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..\..\plugins\sprite_component\sprite_component.c(74,5): warning : unused variable &amp;#39;ta_TM_SHUTDOWN_TEMP_ALLOCATOR_is_missing&amp;#39; [-Wunused-variable] [C:\projects\slowgames\CosmicTrash\build\sprite_component\sprite_compon
ent.vcxproj]
c:\projects\slowgames\OurMachinery\headers\foundation&#x2F;temp_allocator.h(98,14): message : expanded from macro &amp;#39;TM_INIT_TEMP_ALLOCATOR&amp;#39; [C:\projects\slowgames\CosmicTrash\build\sprite_component\sprite_component.vcxproj]
&amp;lt;scratch space&amp;gt;(11,1): message : expanded from here [C:\projects\slowgames\CosmicTrash\build\sprite_component\sprite_component.vcxproj]
  sprite_component.vcxproj -&amp;gt; c:\projects\slowgames\OurMachinery\bin\plugins\tm_sprite_component.dll

-----------------------------
tmbuild completed in: 2.088 s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;working-with-stretchy-buffers&quot;&gt;Working with stretchy buffers&lt;&#x2F;h4&gt;
&lt;p&gt;Throughout this update we&#x27;re collecting entity IDs into two lists. We first initialize them as null pointers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tm_entity_t *mod_link = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
tm_entity_t *mod_transform = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the previously initialized temp allocator, we can now push values on to these:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(link) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* snip *&#x2F;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_carray_temp_push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mod_link, a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[i], ta);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* snip *&#x2F;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_carray_temp_push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mod_transform, a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[i], ta);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These stretchy buffers track their count and capacity in a header &lt;em&gt;behind&lt;&#x2F;em&gt; the address of the first item. Behind meaning, when allocating the buffer, the initial bytes are the header, then the pointer to the head of the array is the next address.&lt;&#x2F;p&gt;
&lt;p&gt;You can iterate over them using the usual C pointer shenanigans:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tm_entity_t *e = mod_link; e != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_carray_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mod_link); ++e) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All the operations you might need or expect when working with carrays are available. One interesting thing about them though is that you use them by including an &amp;quot;*.inl&amp;quot; file rather than a header. Most of the code seems to be macros.&lt;&#x2F;p&gt;
&lt;p&gt;Our example uses the temp allocator and associated carray macros, but there are other options, including the use of static memory.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;using-the-link-manager&quot;&gt;Using the link_manager&lt;&#x2F;h4&gt;
&lt;p&gt;One of the first steps in the function is to get a pointer to the link_manager:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint32_t link_component = tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lookup_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, TM_TT_TYPE_HASH__LINK_COMPONENT);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*link_manager = tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, link_component)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;manager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is used at the end of the function in order to make use of the &lt;code&gt;tm_link_component_api&lt;&#x2F;code&gt;. We must use this to correctly update any linked transforms:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tm_entity_t *e = mod_link; e != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_carray_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mod_link); ++e) {
    tm_link_component_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(link_manager, *e);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;iterating-over-the-update-data&quot;&gt;Iterating over the update data&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;tm_engine_update_set_t&lt;&#x2F;code&gt; struct has a field &lt;code&gt;arrays&lt;&#x2F;code&gt; which holds one or more &lt;code&gt;tm_engine_update_array_t&lt;&#x2F;code&gt; structs. These update array structs hold the lists of entities and component data.&lt;&#x2F;p&gt;
&lt;p&gt;The component data appears to be an array of pointers to arrays of component data actually. The component data lists are in the same order you specify in the &lt;code&gt;tm_engine_i&lt;&#x2F;code&gt; implementation used to register the update function.&lt;&#x2F;p&gt;
&lt;p&gt;When we get down to business with our component update work, we first need to iterate over these update arrays:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tm_engine_update_array_t *a = data-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrays&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; a &amp;lt; data-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arrays &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ data-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_arrays&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; ++a) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now for each of these we get our lists of component data:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_sprite_component_t *sprite_component = a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
tm_transform_component_t *transform = a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
tm_link_component_t *link = a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we can iterate over each &lt;em&gt;entity&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(uint32_t i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; i &amp;lt; a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; ++i) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Just in case it isn&#x27;t obvious, in this loop &lt;code&gt;i&lt;&#x2F;code&gt; is the index of the entity data, and not the entity ID. The actual entity IDs are stored in the &lt;code&gt;entities&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;updating-the-entity-y-coordinates-using-sinf&quot;&gt;Updating the entity y coordinates using sinf&lt;&#x2F;h4&gt;
&lt;p&gt;For the actual &amp;quot;work&amp;quot; to be done we&#x27;re finally ready to modify some transforms! Yeee-haaw!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(!sprite_component[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
    sprite_component[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= transform[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; y = sprite_component[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;+ sprite_component[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;amplitude &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sinf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)t * sprite_component[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frequency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(link) {
    link[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;local_transform&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= y;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_carray_temp_push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mod_link, a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[i], ta);
}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    transform[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= y;
    ++transform[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_carray_temp_push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mod_transform, a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[i], ta);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up!&lt;&#x2F;h2&gt;
&lt;p&gt;Adding our component to one of the sample entities shows that it does indeed move in the Y-axis as expected. Updating the frequency and amplitude takes effect in real-time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part4&#x2F;wavy_thing.mp4&quot;&gt;Here&lt;&#x2F;a&gt; is a short screen cap. &lt;em&gt;(How does one make gifs these days?)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This was also a rather large post. But thanks for taking a look while I refuse to read docs before playing around and making assumptions.&lt;&#x2F;p&gt;
&lt;p&gt;Having come to this point I&#x27;m barely scratching the surface of what is possible. There are a lot of directions I&#x27;d like to go from here. The next set of posts will be a bit more focused on learning how to do something specific I think. Armed now as I am with the rudimentary understanding of The Machinery, I&#x27;d like to take the next steps converting this example component into the 3D sprite component I have in mind. This probably means that I&#x27;d need to start by exploring the asset import workflow and learning more about what the creation graphs can do.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Machinery - Part 3</title>
		<published>2020-07-16T00:00:00+00:00</published>
		<updated>2020-07-16T00:00:00+00:00</updated>
		<link href="https://slowgames.github.io/the-machinery-part3/" type="text/html"/>
		<id>https://slowgames.github.io/the-machinery-part3/</id>
		<content type="html">&lt;p&gt;Finally! Code only this time (&lt;em&gt;probably&lt;&#x2F;em&gt;). The Machinery has a number of great samples and gives you a great little component template to get started with. It&#x27;s jam packed with &lt;em&gt;stuff&lt;&#x2F;em&gt;! It&#x27;s entirely written in &lt;strong&gt;C&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Folks that know me probably expect me to just hop right into Rust. But not yet! Not until I understand a great deal more about The Machinery. But aside from that I really want to get out of my head a bit and sometimes the best way to do that is to just take a break from your usual patterns and habits.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The Machinery can be extended in a couple of ways. You can create custom components for the ECS (or is it an &lt;em&gt;ECE&lt;&#x2F;em&gt;), you can create new editor tags&#x2F;interfaces, and you can create nodes for the graph component. You can do quite a bit with these extension points... you can do pretty much anything. Custom data, editors, and gameplay systems all kick off from there. The Machinery is sort of wild.&lt;&#x2F;p&gt;
&lt;p&gt;But today is not the day to figure out all the ways to do very subversive and wild systems engineering. Today is all about getting our vocab built-up and coming to an understanding the fundamentals.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-steps&quot;&gt;First Steps&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;&#x2F;strong&gt; What makes a plugin to The Machinery?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;&#x2F;strong&gt; Any dll&#x2F;so&#x2F;dylib, whose name begins with &lt;code&gt;tm_&lt;&#x2F;code&gt;, that exports the function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tm_load_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_api_registry_api *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first thing provided to a plugin is a pointer to the registry &lt;em&gt;api&lt;&#x2F;em&gt;. According to the docs the registry api provides a &lt;em&gt;&amp;quot;Global registry that keeps track of loaded APIs and interface implementations.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So out of the gate we have a distinction between an &amp;quot;API&amp;quot; and an &amp;quot;Interface&amp;quot;. Helpfully the docs immediately clarify the distinction between the two.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;code&gt;API&lt;&#x2F;code&gt; is something with a single implementation. An &lt;code&gt;Interface&lt;&#x2F;code&gt; is something with potentially multiple implementations. Makes sense.&lt;&#x2F;p&gt;
&lt;p&gt;The registry api includes functions (&lt;em&gt;it&#x27;s rather hard to stop myself from writing &#x27;method&#x27; everywhere&lt;&#x2F;em&gt;) to &lt;code&gt;get&lt;&#x2F;code&gt; and &lt;code&gt;set&lt;&#x2F;code&gt; an api implementation, and it has functions to &lt;code&gt;add_implementation&lt;&#x2F;code&gt;, &lt;code&gt;remove_implementation&lt;&#x2F;code&gt;, and get a list of &lt;code&gt;implementations&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Getting a list of implementations has that fun C style interface of a pointer to pointer &lt;code&gt;**&lt;&#x2F;code&gt; and you&#x27;ll be getting the number of implementations via an out arg &lt;code&gt;*count&lt;&#x2F;code&gt;. These sorts of interfaces to systems are so easy and familiar... but I&#x27;m still wary when I see it. You have to be so careful and consistent with marking things &lt;code&gt;const&lt;&#x2F;code&gt; that aren&#x27;t out arguments. It&#x27;s maybe less efficient or possibly just annoying, but I&#x27;d have preferred a struct with the count and implementations to just be returned.&lt;&#x2F;p&gt;
&lt;p&gt;Nobody writes C that way of course, so it wouldn&#x27;t make sense for the folks at Our Machinery to suddenly start doing things like that I suppose. Also.. yeah, if I consider it more it&#x27;d be annoying to have structs for the result of every function like this. C++ has templates for this. C could just use &lt;code&gt;void*&lt;&#x2F;code&gt; but then you&#x27;d be casting for every use and boy-howdy that&#x27;s some line noise.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ok, so that&#x27;s an intro to the &lt;code&gt;api_registry&lt;&#x2F;code&gt; and what we&#x27;re expected to use it for but what&#x27;s up with that &lt;code&gt;bool load&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Based on the following two macros:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Convenience macro that either sets or remove an api based on value of `load` flag.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tm_set_or_remove_api&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) \
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(load)                                      \
        reg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(name, ptr, sizeof(*ptr));         \
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else                                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;\
        reg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ptr)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Convenience macro that either adds or removes an implementation based on value of `load` flag.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tm_add_or_remove_implementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) \
    (load ? reg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_implementation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: reg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove_implementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)(name, ptr)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m lead to believe that this indicates whether the plugin is being loaded or unloaded. I didn&#x27;t yet see anything in the UI that would specifically unload a plugin, but The Machinery can be run with a &lt;code&gt;--hot-reload&lt;&#x2F;code&gt; flag. Unless I&#x27;m mistaken this facility works by renaming the plugin dll before loading it, so that when you rebuild a plugin it can be copied again and loaded. The previous loaded code would be then responsible for unregistering it&#x27;s component interfaces, apis, and other code. &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;dll-hot-reloading-in-theory-and-practice&#x2F;&quot;&gt;Here&lt;&#x2F;a&gt; is a relevant blog post on the matter.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So now it&#x27;s clear that in order to be a plugin you need to define (and export) the expected function in your library and use the provide &lt;code&gt;api_registry&lt;&#x2F;code&gt; API to get access to any API that you require for your plugin, as well as register anything your plugin provides.&lt;&#x2F;p&gt;
&lt;p&gt;Something I didn&#x27;t expect, because I&#x27;m rather biased and trained to think in certain ways, was that if your plugin needs to use specific APIs you need to stick them someplace... but where? Well, it&#x27;s C, so static global state apparently. :D In C, a static global is only accessible to the compilation unit it&#x27;s declared in, so you&#x27;d want to initialize any static global pointers in the &lt;code&gt;tm_load_plugin&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;To illustrate how this works in The Machinery we can just look at how the example component we&#x27;re reviewing gets a pointer to the entity API:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_entity_api *tm_entity_api;


TM_DLL_EXPORT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tm_load_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_api_registry_api *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    tm_entity_api = reg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(TM_ENTITY_API_NAME);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One final interesting thing to note is that the &lt;code&gt;api_registry&lt;&#x2F;code&gt; will always return to you a pointer to an api, but it&#x27;s associated functions may be NULL until whatever plugin provides them has been loaded. In addition to this, if a plugin that provides the api implementation is reloaded, your static global pointer will have been updated for you.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;At this point it is already an interesting thought process to imagine what a Rust version of the this would look like. None of this is possible to do without using &lt;code&gt;unsafe&lt;&#x2F;code&gt;, although the lazy_static crate might be able to help.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;a-simple-component&quot;&gt;A Simple Component&lt;&#x2F;h2&gt;
&lt;p&gt;Components are just structs in The Machinery. Nice and simple. The example component is declared as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;struct tm_sprite_component_t
{
    float y0;
    float frequency;
    float amplitude;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s called &amp;quot;sprite component&amp;quot; because I ultimately plan to make it a 3D sprite component.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Nice and simple but certainly will require some wiring before we can &amp;quot;attach&amp;quot; it to an entity and have any property values serialized to disk with the scene.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;introducing-our-component-data-to-the-truth&quot;&gt;Introducing our component data to The Truth&lt;&#x2F;h3&gt;
&lt;p&gt;To get started we must look to &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;the-story-behind-the-truth-designing-a-data-model&#x2F;&quot;&gt;The Truth&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We need a way to describe our component and its properties as well as give it a &amp;quot;type&amp;quot;. In order to give your object&#x2F;component a type we have to decide on a type name (and calculate it&#x27;s hash apparently). The type name should be prefixed with &lt;code&gt;tm_&lt;&#x2F;code&gt; I think, and from what I&#x27;ve seen it generally just matches the struct name.&lt;&#x2F;p&gt;
&lt;p&gt;The example code uses the preprocessor to define:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;TM_TT_TYPE__SPRITE_COMPONENT &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tm_sprite_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;TM_TT_TYPE_HASH__SPRITE_COMPONENT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_STATIC_HASH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tm_sprite_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x788c0feb4cc58af4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The type name is expected to be a static string, and the useful macro &lt;code&gt;TM_STATIC_HASH&lt;&#x2F;code&gt; acts as a marker for a preprocess step, a useful tool named &lt;code&gt;hash.exe&lt;&#x2F;code&gt; that can generate hashes for you, or update them in the file if they don&#x27;t match. (&lt;em&gt;this tool should probably be renamed as &lt;code&gt;tmhash.exe&lt;&#x2F;code&gt; right?&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Any properties that should be known to The Truth need to have IDs and C enums would appear to be the tool in charge of that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    TM_TT_PROP__SPRITE_COMPONENT__FREQUENCY, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; float
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    TM_TT_PROP__SPRITE_COMPONENT__AMPLITUDE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; float
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Properties also have types, and The Truth has a fixed set of options here that seem to cover every useful possibility &lt;em&gt;&amp;quot;none&amp;quot;, bool, uint32, uint64, float, double, string, &amp;quot;buffer&amp;quot;, &amp;quot;reference&amp;quot;, &amp;quot;subobject&amp;quot;, &amp;quot;reference set&amp;quot;, &amp;quot;subobject set&amp;quot;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is how we describe our components properties:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tm_the_truth_property_definition_t sprite_component_properties[] = {
    [TM_TT_PROP__SPRITE_COMPONENT__FREQUENCY] = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;frequency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, TM_THE_TRUTH_PROPERTY_TYPE_FLOAT },
    [TM_TT_PROP__SPRITE_COMPONENT__AMPLITUDE] = { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amplitude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, TM_THE_TRUTH_PROPERTY_TYPE_FLOAT },
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So with the requisite metadata in hand we&#x27;re ready to take the remaining couple of steps to introduce our component to The Machinery by creating the type in the The Truth:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint64_t sprite_component_type = tm_the_truth_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_object_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    tt, TM_TT_TYPE__SPRITE_COMPONENT,
    sprite_component_properties,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TM_ARRAY_COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sprite_component_properties));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In certain cases you might want to have your component defaulted to some value other than a zero-initialized struct. In these cases you can create an instance of your component and set it as the default that will be cloned whenever this component is added to an entity:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uint64_t default_object = tm_the_truth_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;quick_create_object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    tt, TM_TT_TYPE_HASH__SPRITE_COMPONENT,
    TM_TT_PROP__SPRITE_COMPONENT__FREQUENCY, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    TM_TT_PROP__SPRITE_COMPONENT__AMPLITUDE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
tm_the_truth_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_default_object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tt, sprite_component_type, default_object);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In general you&#x27;re discouraged from doing this. Zero-initialized data is the mantra in The Machinery.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hard not to stop for a second and pull on a thread here. The &lt;code&gt;quick_create_object&lt;&#x2F;code&gt; function is a combination of &lt;code&gt;create_object&lt;&#x2F;code&gt; and &lt;code&gt;quick_set_properties&lt;&#x2F;code&gt;. It uses varargs to essentially call a more specialized property setter. &lt;em&gt;But how on earth does this translate to updating field members on a struct?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It doesn&#x27;t&lt;&#x2F;strong&gt; because The Truth deals with &amp;quot;objects&amp;quot; and &amp;quot;properties&amp;quot;, and provides facilities to get &lt;em&gt;read pointers&lt;&#x2F;em&gt; and &lt;em&gt;write pointers&lt;&#x2F;em&gt; to objects which let you &lt;em&gt;get&lt;&#x2F;em&gt; and &lt;em&gt;set&lt;&#x2F;em&gt; property values on objects in a thread-safe way. The type and value you&#x27;re setting up don&#x27;t deal with our component struct directly, but let&#x27;s put a pin in this trail of thought for now and quickly mention &amp;quot;aspects&amp;quot; in The Truth.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;Aspects&lt;&#x2F;em&gt; in The Truth are an &lt;em&gt;interface&lt;&#x2F;em&gt; that provide specific functionalities to object types. This happens to be the extension point which gives us the ability to have a standard editor ui for interaction with our component if desired. Things like custom gizmos in the viewport can be setup this way if I understand correctly.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t see it used anywhere else in the example component, but it does setup an editor ui aspect for the component with a completely default implementation for the &lt;code&gt;tm_ci_editor_ui_i&lt;&#x2F;code&gt; interface:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* static global handle to the interface *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_ci_editor_ui_i *editor_aspect = &amp;amp;(tm_ci_editor_ui_i) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* defined in our type creation function *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
tm_the_truth_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set_aspect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tt, sprite_component_type, TM_CI_EDITOR_UI, editor_aspect);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looking at the docs for this interface this should mark the component as enabled in the editor with no special handling or representation in the viewports or editor gizmos.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;All of the previous setup was handled in a short function &lt;code&gt;static void truth__create_types(struct tm_the_truth_o *tt)&lt;&#x2F;code&gt;. A pointer to this function is given to the truth as an implementation of the &lt;code&gt;tm_the_truth_create_types_i&lt;&#x2F;code&gt; interface (which is just a single function pointer):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_add_or_remove_implementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reg, load, TM_THE_TRUTH_CREATE_TYPES_INTERFACE_NAME, truth__create_types);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Gotta wonder now, how is it handled that a type fundamentally changes when you reload a plugin? Does The Truth keep track of this somehow?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;setting-up-our-component-for-use-with-entities&quot;&gt;Setting up our component for use with entities&lt;&#x2F;h2&gt;
&lt;p&gt;So, our component is a struct that we want to store on an entity, but it&#x27;s key data is also kept in The Truth. Let&#x27;s look first at how we can make it possible to associate our struct with an entity.&lt;&#x2F;p&gt;
&lt;p&gt;The entity api defines a specific interface for creating components &lt;code&gt;tm_entity_create_component_i&lt;&#x2F;code&gt; and we setup an implementation of this interface as such:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_add_or_remove_implementation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(reg, load, TM_ENTITY_CREATE_COMPONENT_INTERFACE_NAME, component__create);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our function &lt;code&gt;component__create&lt;&#x2F;code&gt; we add an implementation of the &lt;code&gt;tm_component_i&lt;&#x2F;code&gt; interface and register it with the &lt;em&gt;entity context&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tm_component_i component = {
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= TM_TT_TYPE__SPRITE_COMPONENT,
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= sizeof(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_sprite_component_t),
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load_asset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= component__load_asset,
};

tm_entity_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;register_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ctx, &amp;amp;component);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our implementation of &lt;code&gt;tm_component_i&lt;&#x2F;code&gt; provides probably the absolute minimum. The name and bytes fields appear to be obvious so what is the &lt;code&gt;load_asset&lt;&#x2F;code&gt; function responsible for? According to it&#x27;s docs this function is responsible for loading data from The Truth. We assign a pointer to our function &lt;code&gt;component__load_asset&lt;&#x2F;code&gt; which is implemented as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;component__load_asset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    tm_component_manager_o *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;man&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    tm_entity_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;c_vp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_the_truth_o *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    uint64_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_sprite_component_t *c = c_vp;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_the_truth_object_o *asset_r = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tm_tt_read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tt, asset);
    c-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    c-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;frequency &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= tm_the_truth_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tt, asset_r, TM_TT_PROP__SPRITE_COMPONENT__FREQUENCY);
    c-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;amplitude &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= tm_the_truth_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(tt, asset_r, TM_TT_PROP__SPRITE_COMPONENT__AMPLITUDE);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fantastically straight forward. Get a read pointer to the object (here called &amp;quot;asset&amp;quot;), then update the component struct with the values that were stored in The Truth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-entities-and-the-truth-a-bit-better&quot;&gt;Understanding entities and The Truth a bit better&lt;&#x2F;h2&gt;
&lt;p&gt;It isn&#x27;t clear from any doc comments when precisely this function will be called or how to reflect changes to the component back into The Truth but my assumption at the moment is that when we registered the editor ui aspect with the object type, we&#x27;re setting up a way to get a UI to update values, which would call this load_asset function.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not hard to test I guess...&lt;&#x2F;p&gt;
&lt;p&gt;First up, let&#x27;s open the editor and add our component to the world entity:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part3&#x2F;add-component.png&quot; alt=&quot;add_component&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And here is the component editor we get:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part3&#x2F;sprite-component-editor.png&quot; alt=&quot;edit_component&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Before I remove the editor aspect and test what happens there, maybe I can add a log line to our &lt;code&gt;component__load_asset&lt;&#x2F;code&gt; function and see if this gets called every time we change a property value in the editor.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll need a handle to the log api first:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tm_logger_api* tm_logger_api;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foundation&#x2F;log.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* .... later inside tm_load_plugin ... *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
tm_logger_api = reg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(TM_LOGGER_API_NAME);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can add a little log output as a treat:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tm_logger_api-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(TM_LOG_TYPE_INFO, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Howdy from component__load_asset!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Build the plugin (remember to run with the &lt;code&gt;--hot-reload&lt;&#x2F;code&gt; flag), return to the editor change a value on the component editor &lt;em&gt;aaaaaaand&lt;&#x2F;em&gt;.... no log output:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part3&#x2F;no-logs.png&quot; alt=&quot;no-logs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Is this because the logs are filtered or because my assumptions were incorrect? Let&#x27;s just add logs to all the things and see... &lt;strong&gt;crash&lt;&#x2F;strong&gt;. OH! I uh, did a dumb thing and put a log line at the start of &lt;code&gt;tm_load_plugin&lt;&#x2F;code&gt; before I had a refrence to the api. :facepalm:&lt;&#x2F;p&gt;
&lt;p&gt;After I fixed that and restarted the editor, oila! There are logs... &lt;strong&gt;and&lt;&#x2F;strong&gt; I&#x27;m seeing that &lt;code&gt;load_asset&lt;&#x2F;code&gt; is indeed called when editing the component.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part3&#x2F;logs.png&quot; alt=&quot;logs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So I don&#x27;t know why the log output didn&#x27;t appear after a hot reload, but I can put that investigation on to the backburner for a while. So I&#x27;ll quickly clear the console, clear all log lines from the plugin, and finally rebuild to make sure everything continues to work as expected... and the log lines are still there. I clearly do not have a complete picture of the plugin hot-loading so I&#x27;m betting that by removing the editor ui aspect we won&#x27;t see a change, unless perhaps we close and restart the editor... which was correct.&lt;&#x2F;p&gt;
&lt;p&gt;But perhaps not surprising, after rebuilding and reloading the editor we no longer have the ability to add the component to the entity!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part3&#x2F;no-component.png&quot; alt=&quot;no-component&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is interesting to consider. Without setting up the editor ui aspect for an object type in The Truth, we can&#x27;t create a component on the entity in the editor... but where exactly did we hook that relationship up?&lt;&#x2F;p&gt;
&lt;p&gt;It appears that, when we register an implementation for the &lt;code&gt;tm_entity_create_component_i&lt;&#x2F;code&gt; interface, the component name is being used to connect The Truth to our entity oriented code. And what is also interesting is that in docs for the interface we register, the implementation is actually referred to as a &lt;em&gt;&amp;quot;component manager&amp;quot;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up!&lt;&#x2F;h2&gt;
&lt;p&gt;Welp, this was pretty long, and hopefully illuminating or interesting. I definitely learned a lot but it&#x27;s just the beginning. For the &lt;a href=&quot;&#x2F;the-machinery-part4&quot;&gt;next post&lt;&#x2F;a&gt; I&#x27;ll start looking at the &lt;em&gt;S&lt;&#x2F;em&gt; in the ECS of The Machinery.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Machinery - Part 2</title>
		<published>2020-07-14T00:00:00+00:00</published>
		<updated>2020-07-14T00:00:00+00:00</updated>
		<link href="https://slowgames.github.io/the-machinery-part2/" type="text/html"/>
		<id>https://slowgames.github.io/the-machinery-part2/</id>
		<content type="html">&lt;h2 id=&quot;using-the-environment&quot;&gt;Using the environment&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;the-machinery-part1&quot;&gt;previous post&lt;&#x2F;a&gt; I mentioned how I found it annoying that everytime I built something, a lib folder with redundant copies of premake and 7zip were being downloaded. After mentioning this on the forums, Niklas clarified that using the &lt;code&gt;TM_LIB_DIR&lt;&#x2F;code&gt; will solve this problem for you.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;tmbuild&lt;&#x2F;code&gt; expects you to have defined the environment variable &lt;code&gt;TM_SDK_DIR&lt;&#x2F;code&gt; already and rather than set environment vars globally like this I tend to use a convention of having a &lt;code&gt;.env&lt;&#x2F;code&gt; or &lt;code&gt;.env.bat&lt;&#x2F;code&gt; file in the root of a project or repo. So in this case my env setup looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;set TM_SDK_DIR=%cd%\OurMachinery
set TM_LIB_DIR=%cd%\OurMachinery\lib

set PATH=%TM_SDK_DIR%\bin;%PATH%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When I want to work on slowgames related stuff (that isn&#x27;t using UE4 or something similarly self-contained), I source my env:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;call .env.bat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or on a posix-ish platform:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;source .env
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then I run whatever editor or IDE I&#x27;m planning to use. &lt;em&gt;Presently it&#x27;s been VS Code since it seems like the least effort to get working.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I also enquired about the clang format setup being used by Our Machinery on the forums. The defaults for VS Code were wildy different. A helpful user shared their setup based on something provided on the Discord server and I modified it ever so slightly. If you&#x27;d like to see it, then &lt;a href=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part2&#x2F;clang-format.txt&quot;&gt;here&lt;&#x2F;a&gt; ya go.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;organizing-the-workspace-choosing-an-approach&quot;&gt;Organizing the workspace, choosing an approach&lt;&#x2F;h2&gt;
&lt;p&gt;With that sorted out I want to decide how to actually structure any experiments.&lt;&#x2F;p&gt;
&lt;p&gt;As I mentioned in the previous post, plugins are apparently expected all be loaded from &lt;code&gt;$(TM_SDK_DIR)&#x2F;bin&#x2F;plugins&lt;&#x2F;code&gt; and so far every premake script in the samples and SDK set that as the output directory.&lt;&#x2F;p&gt;
&lt;p&gt;Is this the only place The Machinery can load plugins from? If so, then is it expected that any projects using The Machinery should vendor the SDK as part of the project?&lt;&#x2F;p&gt;
&lt;p&gt;The answer is that, yes currently for the beta this is the case, however there are plans to have project specific plugin locations in the future so it doesn&#x27;t appear to be expected that you&#x27;d be vendoring the SDK into every project.&lt;&#x2F;p&gt;
&lt;p&gt;So how to proceed? What sort of layout and workflow isn&#x27;t going to trigger an itch?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;If you&#x27;re like me, then there probably isn&#x27;t much that won&#x27;t make you itch a bit.&lt;&#x2F;em&gt; So I decided initially to just make a top-level premake script and duplicate any other bits of the SDK or sample projects I wanted to refer to so that even if I decided to use Visual Studio instead of VS Code I&#x27;d have something handy to reference. Very soon after creating a new plugin project and setting that up, I realized what a mistake it was. :)&lt;&#x2F;p&gt;
&lt;p&gt;Instead I just decided to make a project level premake script, accept that the output will go into the SDK for now, and not worry about having potential reference projects included in the Visual Studio solution.&lt;&#x2F;p&gt;
&lt;p&gt;So in my repo I have a project folder, with a plugins subdirectory. In the project is a premake script which will define targets for any plugins. This approach is based on how the SDK &lt;code&gt;samples&lt;&#x2F;code&gt; project is setup as opposed to how the &lt;code&gt;sample_projects&lt;&#x2F;code&gt; setup is to have a premake script on a per-plugin basis.&lt;&#x2F;p&gt;
&lt;p&gt;Any confusion early on regarding how you&#x27;re &lt;em&gt;supposed&lt;&#x2F;em&gt; to do anything is largely the result of The Machinery being like a nice box of Lego instead of a set of choices followed by bumper rails to lead you to a set of pre-defined targets. You can do whatever you like and it&#x27;ll &lt;em&gt;probably&lt;&#x2F;em&gt; be ok.&lt;&#x2F;p&gt;
&lt;p&gt;To quickly summarize, my project root now looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;c:\projects\slowgames\CosmicTrash&amp;gt;fd
Slowgames.sln
libs.json
plugins
plugins\sprite_component
plugins\sprite_component\sprite_component.c
premake5.lua
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;sprite_component&lt;&#x2F;code&gt; is just a sample component created via the editor. For the curious, the output from tmbuild in project folder:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;c:\projects\slowgames\CosmicTrash&amp;gt;tmbuild -c Release
Building configurations...
Running action &amp;#39;vs2019&amp;#39;...
Generated build&#x2F;sprite_component&#x2F;sprite_component.vcxproj...
Done (169ms).
Microsoft (R) Build Engine version 16.6.0+5ff7b0c9e for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

  sprite_component.c
     Creating library c:\projects\slowgames\OurMachinery\bin\plugins\tm_sprite_component.lib and object c:\projects\slowgames\OurMachinery\bin\plugins\tm_sprite_component.exp
  sprite_component.vcxproj -&amp;gt; c:\projects\slowgames\OurMachinery\bin\plugins\tm_sprite_component.dll

-----------------------------
tmbuild completed in: 6.269 s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now in the &lt;a href=&quot;&#x2F;the-machinery-part3&quot;&gt;next post&lt;&#x2F;a&gt; we can finally start looking at code.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Machinery - Part 1</title>
		<published>2020-07-12T00:00:00+00:00</published>
		<updated>2020-07-14T00:00:00+00:00</updated>
		<link href="https://slowgames.github.io/the-machinery-part1/" type="text/html"/>
		<id>https://slowgames.github.io/the-machinery-part1/</id>
		<content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;&quot;&gt;The Machinery&lt;&#x2F;a&gt; is an exciting SDK and toolset that is currently in a closed beta period and I was recently given access (&lt;em&gt;anybody can &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;beta.html&quot;&gt;apply&lt;&#x2F;a&gt;, I have no contacts or special credits to my name&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;There are many reasons why The Machinery is interesting and I&#x27;ll try to avoid repeating things you can read on the &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Two things stand out to me and motivate exploration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The SDK and engine are primarily developed in C with some excellent &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;physical-design&#x2F;&quot;&gt;constraints&lt;&#x2F;a&gt; to keep the design clean. This provides developers with &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;creating-cross-language-apis&#x2F;&quot;&gt;interesting possibilities&lt;&#x2F;a&gt; right out of the gate.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;little-machines-working-together-part-1&#x2F;&quot;&gt;Modularity&lt;&#x2F;a&gt; is a principal goal for all aspects of the SDK.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;The invitation to the beta comes in the form of an invitation to their forums. It&#x27;s powered by &lt;a href=&quot;https:&#x2F;&#x2F;www.discourse.org&#x2F;&quot;&gt;Discourse&lt;&#x2F;a&gt; which is a nice and familiar platform these days.&lt;&#x2F;p&gt;
&lt;p&gt;Beta releases, like their alpha releases before that, are distributed as attachments to associated topics in the forum. The current beta package is a &lt;em&gt;delightful&lt;&#x2F;em&gt; 34Mb in size! It only targets Windows initially. Internally they support other platforms, but sensibly the beta releases are limiting the platforms to focus on more important things.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;In addition to the SDK archive, there is a sample projects archive that&#x27;s 165Mb. This consists of a series of projects with asset data actually baked into project files, and a set of focused plugin examples with source code.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once downloaded I don&#x27;t have any idea how the SDK is meant to be used or organized so I just plopped it into &lt;code&gt;c:\projects\slowgames&lt;&#x2F;code&gt; which is my monorepo for all things slowgames.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have been using Perforce for this monorepo for a while, however recently I started using PlasticSCM to see if I like it a bit more given it&#x27;s git-like proclivities. So far, the answer is &#x27;meh&#x27;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So, now with these archives downloaded and unpacked let&#x27;s continue by looking at the SDK contents:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;c:\projects\slowgames\OurMachinery&amp;gt;ls -l
total 76
-rw-r--r-- 1 phote phote 62326 Jul  9 18:25 README.md.html
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 bin
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 code
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 doc
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 headers
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 lib
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 samples
drwxr-xr-x 1 phote phote     0 Jul  9 18:25 utils
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;I really really hate the Windows 10 desperate need to chop off the &#x27;x&#x27; from my username. What the hell is the reason for that?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Nice, a README. A 61kb README full of excellent information about how to work with The Machinery, the key concepts introduce and outline the ideas behind how data should be worked with, ideas for scene organization, introductions to the primary editor modes, and the basics of extending the engine via the plugin system.&lt;&#x2F;p&gt;
&lt;p&gt;After going over the README a bit and getting that early feel for things, it&#x27;s time to run the editor and play with some samples.&lt;&#x2F;p&gt;
&lt;p&gt;When you open &lt;code&gt;bin\the-machinery.exe&lt;&#x2F;code&gt; You get the default scene:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part1&#x2F;the-machinery-beta-default-scene.png&quot; alt=&quot;the-machinery-default-scene&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;That isn&#x27;t entirely true, what you get is a &amp;quot;Windows Defender&amp;quot; warning about this being an unsigned binary or something. Which is perfectly reasonable given the beta status.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;From here you can easily load any of the sample projects and dig around.&lt;&#x2F;p&gt;
&lt;p&gt;The pong example provides an interesting look into using the &lt;code&gt;Graph&lt;&#x2F;code&gt; component, which is their visual scripting system. &lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part1&#x2F;the-machinery-beta-pong.png&quot; alt=&quot;pong_screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first and third person gameplay examples take the approach of showing how to implement gameplay via the plugin system. &lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part1&#x2F;the-machinery-beta-third-person.png&quot; alt=&quot;third_person_screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The other samples all try to demonstrate particular available systems or features. There is a lot to take in, the samples are focused and good at their job I think.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-a-component&quot;&gt;Building a Component&lt;&#x2F;h2&gt;
&lt;p&gt;Our Machinery have a nice &lt;a href=&quot;https:&#x2F;&#x2F;ourmachinery.com&#x2F;post&#x2F;one-button-source-code-builds&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; explaining their thinking behind the provided build tools.&lt;&#x2F;p&gt;
&lt;p&gt;The short version is that The Machinery includes a tool called &lt;code&gt;tmbuild&lt;&#x2F;code&gt; that generates projects with premake, runs the build, and possibly any unit tests in the plugin you&#x27;re building.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;ve never used premake so this is all a bit new to me. I&#x27;m disappointed that I&#x27;m not able to easily use CLion. I&#x27;m comfortable with VS Code and Visual Studio. I just consider CLion and Emacs to be better at editing code. My current Emacs setup for working with C and C++ relies on a clang compilation database to be available and without it, VS Code is just the better choice. Can premake generate compilation databases?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It does all of this quickly and easily, but also in a bit of an annoying way. The first thing I did was run around the SDK and run tmbuild in any directory that contained a &lt;code&gt;premake5.lua&lt;&#x2F;code&gt;. But the result, aside from everything building fine and dandy, is that the SDK is now litered with extraneous folders and solutions.&lt;&#x2F;p&gt;
&lt;p&gt;For every build you&#x27;ll end up with a &lt;code&gt;lib&lt;&#x2F;code&gt; folder which contains 7zip and premake. You&#x27;ll also get a Visual Studio solution next to your premake script and a folder named &lt;code&gt;build&lt;&#x2F;code&gt; with any project files referenced by the solution as well as a folder for intermediate build outputs. For now I&#x27;m just going to accept that as it is and contiue on my merry way.&lt;&#x2F;p&gt;
&lt;p&gt;We can use the editor to initialize a new component for us (including a premake script :+1:). &lt;img src=&quot;https:&#x2F;&#x2F;slowgames.github.io&#x2F;the-machinery-part1&#x2F;the-machinery-beta-new-plugin.png&quot; alt=&quot;new_component&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As someone new to premake it&#x27;s a wallop to take in, but thankfully some key lines are easy to spot at the bottom:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;location &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;build&#x2F;foo_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targetname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tm_foo_component&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SharedLib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;language &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*.inl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;}
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sysincludedirs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{ &amp;quot;&amp;quot; }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;platforms:Win64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targetdir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$(TM_SDK_DIR)&#x2F;bin&#x2F;plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So in the end, we have premake generating projects and setting the actual output to the SDK plugins folder. This means that it would likely be straight-forward to use another build system or project structure.&lt;&#x2F;p&gt;
&lt;p&gt;Something about this makes me wonder what is expected for project organization. Should you vendor in the SDK per-project? It certainly seems that way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;going-forward&quot;&gt;Going Forward&lt;&#x2F;h2&gt;
&lt;p&gt;This is a difficult post to write because I&#x27;ve been mostly working from memory and trying to recap my process of fumbling around and starting to feel comfortable with everything. I don&#x27;t want to copy and paste information you&#x27;d get in the README, or from their blog. And in general I have a lot of opinions and reactions I&#x27;m still chewing on a bit.&lt;&#x2F;p&gt;
&lt;p&gt;In the next post I&#x27;ll talk about how I&#x27;ve decided to structure my exploration for the time being, and we can look at a minimal component and play around with building and hot reloading. Posts should get a bit more focused after that.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
